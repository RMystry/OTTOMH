//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input Handling/Input System Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""gameplay"",
            ""id"": ""3bfd78e2-ace8-43ef-af3a-8a122511b7e6"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""bcabceb9-5860-4938-945c-e051eff047fd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""dodge"",
                    ""type"": ""Button"",
                    ""id"": ""4e0c2f62-76d8-4044-b0eb-c583cfd7888e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""attack"",
                    ""type"": ""Button"",
                    ""id"": ""029975d1-ba91-4884-bdd6-4a459c519b1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""shove"",
                    ""type"": ""Button"",
                    ""id"": ""c6882c8e-005b-4136-8a03-9ca2714a94e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""drop_item"",
                    ""type"": ""Button"",
                    ""id"": ""2acb7771-bf1e-4abd-92d0-15bf9bf932f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""activate"",
                    ""type"": ""Button"",
                    ""id"": ""3d04f285-c32e-4f52-9b44-cad0148f35be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""throw_weapon"",
                    ""type"": ""Button"",
                    ""id"": ""9d720251-e332-44f1-814e-2f67cd46dfc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""7fe6cffe-38b7-4406-bd5a-f9d5b97f3147"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3cf3f442-8434-48d2-9436-dd152462c4ce"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""adfd5018-3389-4fe0-9461-097d046d98c3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c630dd34-feac-46f6-baf8-3b3a39aaef88"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""99f5f874-4549-4591-8d15-6aa3169a3a2c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""89f839fa-c1b4-4bea-9d33-98ae866bc80c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94f87fcd-cc9b-4ec3-8915-1cfa67ed9745"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4e1cfe2-ca7f-44b3-88f9-ccbcadaefabc"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d506a5a-16d1-48cf-b739-2c08cca32c10"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""drop_item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44069a66-cca3-4425-b6ad-3ef840398af3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31c971af-1125-4cb5-abc4-d2c27939dec9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""throw_weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // gameplay
        m_gameplay = asset.FindActionMap("gameplay", throwIfNotFound: true);
        m_gameplay_move = m_gameplay.FindAction("move", throwIfNotFound: true);
        m_gameplay_dodge = m_gameplay.FindAction("dodge", throwIfNotFound: true);
        m_gameplay_attack = m_gameplay.FindAction("attack", throwIfNotFound: true);
        m_gameplay_shove = m_gameplay.FindAction("shove", throwIfNotFound: true);
        m_gameplay_drop_item = m_gameplay.FindAction("drop_item", throwIfNotFound: true);
        m_gameplay_activate = m_gameplay.FindAction("activate", throwIfNotFound: true);
        m_gameplay_throw_weapon = m_gameplay.FindAction("throw_weapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // gameplay
    private readonly InputActionMap m_gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_gameplay_move;
    private readonly InputAction m_gameplay_dodge;
    private readonly InputAction m_gameplay_attack;
    private readonly InputAction m_gameplay_shove;
    private readonly InputAction m_gameplay_drop_item;
    private readonly InputAction m_gameplay_activate;
    private readonly InputAction m_gameplay_throw_weapon;
    public struct GameplayActions
    {
        private @PlayerInputActions m_Wrapper;
        public GameplayActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_gameplay_move;
        public InputAction @dodge => m_Wrapper.m_gameplay_dodge;
        public InputAction @attack => m_Wrapper.m_gameplay_attack;
        public InputAction @shove => m_Wrapper.m_gameplay_shove;
        public InputAction @drop_item => m_Wrapper.m_gameplay_drop_item;
        public InputAction @activate => m_Wrapper.m_gameplay_activate;
        public InputAction @throw_weapon => m_Wrapper.m_gameplay_throw_weapon;
        public InputActionMap Get() { return m_Wrapper.m_gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @dodge.started += instance.OnDodge;
            @dodge.performed += instance.OnDodge;
            @dodge.canceled += instance.OnDodge;
            @attack.started += instance.OnAttack;
            @attack.performed += instance.OnAttack;
            @attack.canceled += instance.OnAttack;
            @shove.started += instance.OnShove;
            @shove.performed += instance.OnShove;
            @shove.canceled += instance.OnShove;
            @drop_item.started += instance.OnDrop_item;
            @drop_item.performed += instance.OnDrop_item;
            @drop_item.canceled += instance.OnDrop_item;
            @activate.started += instance.OnActivate;
            @activate.performed += instance.OnActivate;
            @activate.canceled += instance.OnActivate;
            @throw_weapon.started += instance.OnThrow_weapon;
            @throw_weapon.performed += instance.OnThrow_weapon;
            @throw_weapon.canceled += instance.OnThrow_weapon;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @dodge.started -= instance.OnDodge;
            @dodge.performed -= instance.OnDodge;
            @dodge.canceled -= instance.OnDodge;
            @attack.started -= instance.OnAttack;
            @attack.performed -= instance.OnAttack;
            @attack.canceled -= instance.OnAttack;
            @shove.started -= instance.OnShove;
            @shove.performed -= instance.OnShove;
            @shove.canceled -= instance.OnShove;
            @drop_item.started -= instance.OnDrop_item;
            @drop_item.performed -= instance.OnDrop_item;
            @drop_item.canceled -= instance.OnDrop_item;
            @activate.started -= instance.OnActivate;
            @activate.performed -= instance.OnActivate;
            @activate.canceled -= instance.OnActivate;
            @throw_weapon.started -= instance.OnThrow_weapon;
            @throw_weapon.performed -= instance.OnThrow_weapon;
            @throw_weapon.canceled -= instance.OnThrow_weapon;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnShove(InputAction.CallbackContext context);
        void OnDrop_item(InputAction.CallbackContext context);
        void OnActivate(InputAction.CallbackContext context);
        void OnThrow_weapon(InputAction.CallbackContext context);
    }
}
